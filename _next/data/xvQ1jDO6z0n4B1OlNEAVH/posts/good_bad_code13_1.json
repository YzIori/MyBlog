{"pageProps":{"post":{"title":"【要約】良いコード/悪いコードで学ぶ設計入門 【13章 1】","date":"2022-1-14","slug":"good_bad_code13_1","content":"<h1 id=\"良いコード悪いコードで学ぶ設計入門-13-章まとめ-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#良いコード悪いコードで学ぶ設計入門-13-章まとめ-1\"><span class=\"icon icon-link\"></span></a>良いコード/悪いコードで学ぶ設計入門　 13 章まとめ 1</h1>\n<h2 id=\"邪悪な構造に陥りがちな-user-クラス\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#邪悪な構造に陥りがちな-user-クラス\"><span class=\"icon icon-link\"></span></a>邪悪な構造に陥りがちな User クラス</h2>\n<p>bad code\nログインに必要最低限な情報を持つように実装されたが、、、</p>\n<pre class=\"language-java\"><code class=\"language-Java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> passwordDigest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>その後、様々な仕様が盛り込まれ、多くのインスタンス変数を持つ構造に、、、</p>\n<pre class=\"language-java\"><code class=\"language-Java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 識別ID</span>\n  <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 名前</span>\n  <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// Eメールアドレス</span>\n  <span class=\"token class-name\">String</span> passwordDigest<span class=\"token punctuation\">;</span>　　<span class=\"token comment\">// パスワード</span>\n  <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 住所</span>\n  <span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 電話番号</span>\n  <span class=\"token class-name\">String</span> bio<span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 自己紹介</span>\n  <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>               <span class=\"token comment\">// URL</span>\n  <span class=\"token keyword\">int</span> discountPoint<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 割引ポイント</span>\n  <span class=\"token class-name\">String</span> themeMode<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 表示テーマ色</span>\n  <span class=\"token class-name\">LocalDate</span> birthday<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 生年月日</span>\n  <span class=\"token comment\">// 省略。その他多くのインスタンス変数</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>サービスがローンチされしばらくした後、ほかの業者も商品を出品できるよう仕様変更がされた。法人ユーザーとして登録できるよう User クラスを使うことに、、、</p>\n<p>その際、業者の身元がわかるように、法人番号を User クラスに追加。</p>\n<pre class=\"language-java\"><code class=\"language-Java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//　省略</span>\n  <span class=\"token class-name\">String</span> corporationNumber<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>NOTE: 点線矢印は「依存関係」を示す。クラス A がクラス B のメソッドやプロパティを使用していることを示すとき、点線矢印はクラス A からクラス B に向かって引かれる。</p>\n<p>UserManager クラスとは別に、法人ユーザを登録・管理する CorporationManager クラスも作られた。その後、様々なバグが…</p>\n<h3 id=\"弊害\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#弊害\"><span class=\"icon icon-link\"></span></a>弊害</h3>\n<ul>\n<li>生年月日の登録がいらない CorporationManager 側で登録された User を、UserManager 側で読み込んでしまったため NullPointerException。</li>\n<li>バリデーションのルールが 2 つのクラスでそれぞれ異なるためバリデーションエラーが多発。</li>\n<li>User クラスの様々なインスタンス変数に関して NullPointerException などのエラーがおこるようになり、正常動作させるために null チェック用の条件分岐やらバグ回避用のロジックを追加したり、メンテンナンスが難しい状態になってしまった。</li>\n</ul>\n<h3 id=\"原因\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#原因\"><span class=\"icon icon-link\"></span></a>原因</h3>\n<p>うまくモデリングされていないことが原因。</p>\n<h2 id=\"モデリングの考え方とあるべき構造\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#モデリングの考え方とあるべき構造\"><span class=\"icon icon-link\"></span></a>モデリングの考え方とあるべき構造</h2>\n<p>モデリングの理解のためには、そもそもシステムが何であるかを理解しなければならない。</p>\n<h3 id=\"システムとは何か\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#システムとは何か\"><span class=\"icon icon-link\"></span></a>システムとは何か</h3>\n<p>辞書での定義</p>\n<p>「きわめて多数の構成要素から成る集合体で、各部分が有機的に連携（レンケイ）して、全体としてひとつの目的を持った仕事をするもの。」</p>\n<p>具体例</p>\n<ul>\n<li>目的地へ移動するとき、人間は二本脚を交互に動かすことで移動する、二足歩行システムを用いている。</li>\n<li>意思疎通では、話者が発声器官を使って話し、聞き手が鼓膜で音を拾う、音波を用いた会話システムを用いている。</li>\n</ul>\n<p>目的地への移動に関して、二足歩行の代わりに自動車や飛行機などの別システムを使える。つまり社会活動は、あるシステムから別のシステムへ代替可能。</p>\n<p>二足歩行と比較して、自動車や飛行機は何倍も速く移動できる。つまり、目的達成するためにシステムは作り出される。システムは目的達成のための手段なのだ。\nシステムの内、コンピューターを利用したものを情報システムと呼ぶ。</p>\n<h3 id=\"システム構造とモデリング\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#システム構造とモデリング\"><span class=\"icon icon-link\"></span></a>システム構造とモデリング</h3>\n<p>システム構造を説明するために、単純な箱で図式化したものをモデルと呼ぶ。モデルの意図を定義し、構成を設計することをモデリングと呼ぶ。</p>\n<p>整理すると</p>\n<ul>\n<li>システムは目的達成手段。</li>\n<li>モデルはシステムの構成要素。つまり、モデルは目的達成手段の一部。</li>\n</ul>\n<p>これらから特定の目的達成のために最低限考慮が必要な要素を備えたものがモデル。</p>\n<h3 id=\"ソフトウェア設計におけるモデリング\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#ソフトウェア設計におけるモデリング\"><span class=\"icon icon-link\"></span></a>ソフトウェア設計におけるモデリング</h3>\n<p>目的それぞれで商品モデルが異なる。</p>","ogImage":{"url":"/assets/blog/dynamic-routing/good_bad_code.png"},"coverImage":"/assets/blog/dynamic-routing/good_bad_code.png","tags":["設計","初心者","Java"]}},"__N_SSG":true}