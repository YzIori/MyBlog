{"pageProps":{"post":{"title":"node.js入門","date":"2022-12-27","slug":"node.js","content":"<h1 id=\"2-章-非同期プログラミング\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#2-章-非同期プログラミング\"><span class=\"icon icon-link\"></span></a>2 章 非同期プログラミング</h1>\n<h2 id=\"マルチスレッドとイベントループのメリットデメリット\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#マルチスレッドとイベントループのメリットデメリット\"><span class=\"icon icon-link\"></span></a>マルチスレッドとイベントループのメリット、デメリット</h2>\n<h3 id=\"マルチスレッド\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#マルチスレッド\"><span class=\"icon icon-link\"></span></a>マルチスレッド</h3>\n<ul>\n<li>メリット: 並行処理をコードで記述する必要がないため、多くのケースで並行処理を簡潔に記述することができる。</li>\n<li>デメリット: 並行処理をコードから制御することが難しく、一部のユースケースを実現するためにはかえって非常に複雑な実装が必要になる。</li>\n</ul>\n<h3 id=\"イベントループ\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#イベントループ\"><span class=\"icon icon-link\"></span></a>イベントループ</h3>\n<ul>\n<li>メリット: 並行処理を柔軟に制御でき、スレッドセーフへの配慮も不要。</li>\n<li>デメリット: 非同期プログラミングが必要になるため、制御フローが複雑になる。</li>\n</ul>","ogImage":{"url":"/assets/blog/dynamic-routing/deck-gl.png"},"coverImage":"/assets/blog/dynamic-routing/deck-gl.png","tags":["node.js","JavaScript"]}},"__N_SSG":true}