{"pageProps":{"post":{"title":"【要約】良いコード/悪いコードで学ぶ設計入門 【13章】","date":"2022-1-14","slug":"good_bad_code13_2","content":"<h1 id=\"良いコード悪いコードで学ぶ設計入門-13-章まとめ-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#良いコード悪いコードで学ぶ設計入門-13-章まとめ-2\"><span class=\"icon icon-link\"></span></a>良いコード/悪いコードで学ぶ設計入門　 13 章まとめ 2</h1>\n<h2 id=\"良くないモデルの問題点と解決方法\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#良くないモデルの問題点と解決方法\"><span class=\"icon icon-link\"></span></a>良くないモデルの問題点と解決方法</h2>\n<p>モデルは「特定の目的達成のために最低限考慮が必要な要素を備えたもの」です。\nそれでは、User モデルの目的は何？</p>\n<p>…</p>\n<p>そうですね、User クラスは、複数の目的ために無理やり利用されており、モデリングしているようでモデリングしていないと言える。このようなモデルを一貫性がないという。</p>\n<p>設計品質が問題になる現場では、ろくにモデリングされず、ただ動くだけのコードが書かれることが多い。モデリングには、対象とする社会活動や目的の理解が必須なのです。</p>\n<h3 id=\"user-とシステムの関係\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#user-とシステムの関係\"><span class=\"icon icon-link\"></span></a>User とシステムの関係</h3>\n<p>ユースケース図を見てみると、アクターすなわちシステム利用者は、システムの外側にいる。システムとは社会活動を効率化するために作り出され、利用されるもの。その中に User として組み込まれているのは不自然な感じ。よく考えると商品も物理的にはシステムの外にいる。しかし、一方で名前や生年月日、Email、そして売値や在庫数など利用者や商品の付帯要素は、システムを動作させる上で必要。</p>\n<p>この一見いびつなこの関係を解消しなければならない。解消の鍵は情報システムが持つ、物理システムとは大きく異なる特徴にある。</p>\n<h3 id=\"仮想世界を表現する情報システム\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#仮想世界を表現する情報システム\"><span class=\"icon icon-link\"></span></a>仮想世界を表現する情報システム</h3>\n<p>情報システムというのは、現実世界の概念のみをコンピューターの世界へ投影した仮想現実の世界である。現実世界の概念をコンピュータの仮想世界へ変換し、意味を対応付け、そして概念的なやりとりをコンピューターによって高速化することで効率化していると考えることができる。</p>\n<h3 id=\"目的別にモデリングする\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#目的別にモデリングする\"><span class=\"icon icon-link\"></span></a>目的別にモデリングする</h3>\n<p>利用者に関して、目的に応じたモデルを考えてみる。GitHub のユーザ設定画面。このように情報システムでは、現実世界での物理的な存在と、情報システム上のモデルが 1:1 になるとは限らず、1:多の関係になるケースがあることが大きな特徴。</p>\n<p>もうひとつの観点として、User という名前が曖昧なことが挙げられる。個人ユーザとも法人ユーザとも、どうとでも解釈可能で、大雑把でガバガバな名前。目的を表現した名前へ設計し直すことも重要。</p>\n<h3 id=\"モデルはモノではなく目的達成手段\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#モデルはモノではなく目的達成手段\"><span class=\"icon icon-link\"></span></a>モデルはモノではなく目的達成手段</h3>\n<p>モデリングがうまくいかない原因は、モデルを単なるモノとして解釈していることが原因の一端。ユーザーであれ、商品であれ、モノとして解釈するとあらゆる目的で使われ、さまざまなデータが詰め込まれて巨大化し、一貫性のない構造になってしまう。目的駆動で名前設計することが、適切に目的達成するモデルを設計することにつながる。</p>\n<h3 id=\"単一責任とは単一目的\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#単一責任とは単一目的\"><span class=\"icon icon-link\"></span></a>単一責任とは単一目的</h3>\n<p>単一責任の原則とは、単一目的の原則。クラスが果たす目的は、たった一つに限定するべき。</p>\n<p>クラスというと「共通利用可能な、汎用的な部品として設計するもの」と考えている方がいるかもしれないが、それは逆。特定の目的に特化して設計することで、変更に強い高品質な構造となる。</p>\n<h3 id=\"モデルの見直し方\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#モデルの見直し方\"><span class=\"icon icon-link\"></span></a>モデルの見直し方</h3>\n<p>クラスの構造に問題がある場合、モデルに問題がある。モデルにいびつな不自然さがあり、一貫性がない場合は以下を検討してみること。</p>\n<ul>\n<li>そのモデルが達成しようとしている目的を洗い出す。</li>\n<li>目的それぞれ特化したモデリングをし直す。</li>\n<li>目的駆動名前設計に基づき、モデルを命名する。</li>\n<li>モデルに目的外の要素が入り込んでいる場合、さらに見直す。</li>\n</ul>","ogImage":{"url":"/assets/blog/dynamic-routing/good_bad_code.png"},"coverImage":"/assets/blog/dynamic-routing/good_bad_code.png","tags":["設計","初心者","Java"]}},"__N_SSG":true}