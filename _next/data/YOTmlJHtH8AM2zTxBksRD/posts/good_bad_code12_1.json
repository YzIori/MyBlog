{"pageProps":{"post":{"title":"【要約】良いコード/悪いコードで学ぶ設計入門 【12章】","date":"2022-1-14","slug":"good_bad_code12_1","content":"<h1 id=\"良いコード悪いコードで学ぶ設計入門-12-章まとめ-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#良いコード悪いコードで学ぶ設計入門-12-章まとめ-1\"><span class=\"icon icon-link\"></span></a>良いコード/悪いコードで学ぶ設計入門　 12 章まとめ 1</h1>\n<h2 id=\"121-必ず自身のクラスのインスタンス変数を使うこと\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#121-必ず自身のクラスのインスタンス変数を使うこと\"><span class=\"icon icon-link\"></span></a>12.1 必ず自身のクラスのインスタンス変数を使うこと</h2>\n<h3 id=\"完全コンストラクタとは\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#完全コンストラクタとは\"><span class=\"icon icon-link\"></span></a>完全コンストラクタとは</h3>\n<p>不正状態から防護するための設計パターン。生焼けオブジェクト(引数なしのデフォルトコンストラクタで初期化してあとからインスタンス変数を初期化する方法)を防止するため、インスタンス変数をすべて初期化できるだけの引数をもったコンストラクタを用意する。そして、コンストラクタ内では、ガード節で不正値を弾く。</p>\n<pre class=\"language-java\"><code class=\"language-Java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Currency</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Currency</span> currency<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Currency</span> currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"金額には0以上を指定してください。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currency <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通貨単位を指定してください。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currency <span class=\"token operator\">=</span> currency<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">Money</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Money</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>currency<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通貨単位が違います。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span>added<span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"122-不変をベースに予期せぬ動作を防ぐには\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#122-不変をベースに予期せぬ動作を防ぐには\"><span class=\"icon icon-link\"></span></a>12.2 不変をベースに予期せぬ動作を防ぐには</h2>\n<p>不変をベースにする。変更するには、変更値を持った新しいインスタンスを生成する形にする。</p>\n<pre class=\"language-java\"><code class=\"language-Java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AttackPower</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">Min</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">AttackPower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&#x3C;</span> MIN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * 攻撃力を強化する\n   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">increment</span> 攻撃力の増分\n   * <span class=\"token keyword\">@return</span> 強化された攻撃力\n   **/</span>\n  <span class=\"token class-name\">AttackPower</span> <span class=\"token function\">reinForce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">AttackPower</span> increment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AttackPower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> increment<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * 無力化する\n   * <span class=\"token keyword\">@return</span> 無力化された攻撃力\n   **/</span>\n  <span class=\"token class-name\">AttackPower</span> <span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AttackPower</span><span class=\"token punctuation\">(</span>MIN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"123-尋ねるな命じろ\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#123-尋ねるな命じろ\"><span class=\"icon icon-link\"></span></a>12.3 尋ねるな、命じろ</h2>\n<pre class=\"language-java\"><code class=\"language-Java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// getter</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// setter</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> newName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>","ogImage":{"url":"/assets/blog/dynamic-routing/good_bad_code.png"},"coverImage":"/assets/blog/dynamic-routing/good_bad_code.png","tags":["設計","初心者","Java"]}},"__N_SSG":true}